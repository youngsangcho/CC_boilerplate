/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,i)=>{"use strict";i.r(t);var r=i("./src/js/data/config.js"),s=i("./src/js/utils/detector.js"),n=i("./src/js/app/main_three.js");i("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),r.default.isDev=!0,function(){if(s.default.webgl){var e=document.getElementById("appContainer");new n.default(e)}else s.default.addGetWebGLMessage()}()},"./src/js/app/dataManager.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});i("./node_modules/papaparse/papaparse.min.js");function r(e,t,i,r,s,n,o){try{var a=e[n](o),l=a.value}catch(e){return void i(e)}a.done?t(l):Promise.resolve(l).then(r,s)}function s(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,i,n,o,a;return t=e,(i=[{key:"loadAllData",value:(o=regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",1);case 1:case"end":return e.stop()}}),e)})),a=function(){var e=this,t=arguments;return new Promise((function(i,s){var n=o.apply(e,t);function a(e){r(n,i,s,a,l,"next",e)}function l(e){r(n,i,s,a,l,"throw",e)}a(void 0)}))},function(){return a.apply(this,arguments)})}])&&s(t.prototype,i),n&&s(t,n),e}()},"./src/js/app/global.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>r});const r={windowWidth:100,windowHeight:100,mouseX:0,mouseY:0,clock:null,textures:[],orbitControl:null,camera:null,dataManager:null,audioTime:0,currentBeatFrame:0,currentBeat:0,currentBeatSub:0}},"./src/js/app/jsm/controls/OrbitControls.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{OrbitControls:()=>a,MapControls:()=>l});var r=i("./node_modules/three/build/three.module.js");const s={type:"change"},n={type:"start"},o={type:"end"};class a extends r.EventDispatcher{constructor(e,t){super(),void 0===t&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),t===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new r.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:r.MOUSE.ROTATE,MIDDLE:r.MOUSE.DOLLY,RIGHT:r.MOUSE.PAN},this.touches={ONE:r.TOUCH.ROTATE,TWO:r.TOUCH.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return d.phi},this.getAzimuthalAngle=function(){return d.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(e){e.addEventListener("keydown",G),this._domElementKeyEvents=e},this.saveState=function(){i.target0.copy(i.target),i.position0.copy(i.object.position),i.zoom0=i.object.zoom},this.reset=function(){i.target.copy(i.target0),i.object.position.copy(i.position0),i.object.zoom=i.zoom0,i.object.updateProjectionMatrix(),i.dispatchEvent(s),i.update(),l=a.NONE},this.update=function(){const t=new r.Vector3,n=(new r.Quaternion).setFromUnitVectors(e.up,new r.Vector3(0,1,0)),o=n.clone().invert(),g=new r.Vector3,f=new r.Quaternion,v=2*Math.PI;return function(){const e=i.object.position;t.copy(e).sub(i.target),t.applyQuaternion(n),d.setFromVector3(t),i.autoRotate&&l===a.NONE&&T(2*Math.PI/60/60*i.autoRotateSpeed),i.enableDamping?(d.theta+=c.theta*i.dampingFactor,d.phi+=c.phi*i.dampingFactor):(d.theta+=c.theta,d.phi+=c.phi);let r=i.minAzimuthAngle,b=i.maxAzimuthAngle;return isFinite(r)&&isFinite(b)&&(r<-Math.PI?r+=v:r>Math.PI&&(r-=v),b<-Math.PI?b+=v:b>Math.PI&&(b-=v),d.theta=r<=b?Math.max(r,Math.min(b,d.theta)):d.theta>(r+b)/2?Math.max(r,d.theta):Math.min(b,d.theta)),d.phi=Math.max(i.minPolarAngle,Math.min(i.maxPolarAngle,d.phi)),d.makeSafe(),d.radius*=u,d.radius=Math.max(i.minDistance,Math.min(i.maxDistance,d.radius)),!0===i.enableDamping?i.target.addScaledVector(p,i.dampingFactor):i.target.add(p),t.setFromSpherical(d),t.applyQuaternion(o),e.copy(i.target).add(t),i.object.lookAt(i.target),!0===i.enableDamping?(c.theta*=1-i.dampingFactor,c.phi*=1-i.dampingFactor,p.multiplyScalar(1-i.dampingFactor)):(c.set(0,0,0),p.set(0,0,0)),u=1,!!(m||g.distanceToSquared(i.object.position)>h||8*(1-f.dot(i.object.quaternion))>h)&&(i.dispatchEvent(s),g.copy(i.object.position),f.copy(i.object.quaternion),m=!1,!0)}}(),this.dispose=function(){i.domElement.removeEventListener("contextmenu",X),i.domElement.removeEventListener("pointerdown",z),i.domElement.removeEventListener("pointercancel",Y),i.domElement.removeEventListener("wheel",W),i.domElement.removeEventListener("pointermove",I),i.domElement.removeEventListener("pointerup",N),null!==i._domElementKeyEvents&&i._domElementKeyEvents.removeEventListener("keydown",G)};const i=this,a={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let l=a.NONE;const h=1e-6,d=new r.Spherical,c=new r.Spherical;let u=1;const p=new r.Vector3;let m=!1;const g=new r.Vector2,f=new r.Vector2,v=new r.Vector2,b=new r.Vector2,w=new r.Vector2,x=new r.Vector2,y=new r.Vector2,A=new r.Vector2,E=new r.Vector2,S=[],C={};function _(){return Math.pow(.95,i.zoomSpeed)}function T(e){c.theta-=e}function j(e){c.phi-=e}const M=function(){const e=new r.Vector3;return function(t,i){e.setFromMatrixColumn(i,0),e.multiplyScalar(-t),p.add(e)}}(),P=function(){const e=new r.Vector3;return function(t,r){!0===i.screenSpacePanning?e.setFromMatrixColumn(r,1):(e.setFromMatrixColumn(r,0),e.crossVectors(i.object.up,e)),e.multiplyScalar(t),p.add(e)}}(),k=function(){const e=new r.Vector3;return function(t,r){const s=i.domElement;if(i.object.isPerspectiveCamera){const n=i.object.position;e.copy(n).sub(i.target);let o=e.length();o*=Math.tan(i.object.fov/2*Math.PI/180),M(2*t*o/s.clientHeight,i.object.matrix),P(2*r*o/s.clientHeight,i.object.matrix)}else i.object.isOrthographicCamera?(M(t*(i.object.right-i.object.left)/i.object.zoom/s.clientWidth,i.object.matrix),P(r*(i.object.top-i.object.bottom)/i.object.zoom/s.clientHeight,i.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),i.enablePan=!1)}}();function L(e){i.object.isPerspectiveCamera?u/=e:i.object.isOrthographicCamera?(i.object.zoom=Math.max(i.minZoom,Math.min(i.maxZoom,i.object.zoom*e)),i.object.updateProjectionMatrix(),m=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),i.enableZoom=!1)}function O(e){i.object.isPerspectiveCamera?u*=e:i.object.isOrthographicCamera?(i.object.zoom=Math.max(i.minZoom,Math.min(i.maxZoom,i.object.zoom/e)),i.object.updateProjectionMatrix(),m=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),i.enableZoom=!1)}function R(e){g.set(e.clientX,e.clientY)}function D(e){b.set(e.clientX,e.clientY)}function F(){if(1===S.length)g.set(S[0].pageX,S[0].pageY);else{const e=.5*(S[0].pageX+S[1].pageX),t=.5*(S[0].pageY+S[1].pageY);g.set(e,t)}}function $(){if(1===S.length)b.set(S[0].pageX,S[0].pageY);else{const e=.5*(S[0].pageX+S[1].pageX),t=.5*(S[0].pageY+S[1].pageY);b.set(e,t)}}function B(){const e=S[0].pageX-S[1].pageX,t=S[0].pageY-S[1].pageY,i=Math.sqrt(e*e+t*t);y.set(0,i)}function H(e){if(1==S.length)f.set(e.pageX,e.pageY);else{const t=Z(e),i=.5*(e.pageX+t.x),r=.5*(e.pageY+t.y);f.set(i,r)}v.subVectors(f,g).multiplyScalar(i.rotateSpeed);const t=i.domElement;T(2*Math.PI*v.x/t.clientHeight),j(2*Math.PI*v.y/t.clientHeight),g.copy(f)}function U(e){if(1===S.length)w.set(e.pageX,e.pageY);else{const t=Z(e),i=.5*(e.pageX+t.x),r=.5*(e.pageY+t.y);w.set(i,r)}x.subVectors(w,b).multiplyScalar(i.panSpeed),k(x.x,x.y),b.copy(w)}function V(e){const t=Z(e),r=e.pageX-t.x,s=e.pageY-t.y,n=Math.sqrt(r*r+s*s);A.set(0,n),E.set(0,Math.pow(A.y/y.y,i.zoomSpeed)),L(E.y),y.copy(A)}function z(e){!1!==i.enabled&&(0===S.length&&(i.domElement.setPointerCapture(e.pointerId),i.domElement.addEventListener("pointermove",I),i.domElement.addEventListener("pointerup",N)),function(e){S.push(e)}(e),"touch"===e.pointerType?function(e){switch(K(e),S.length){case 1:switch(i.touches.ONE){case r.TOUCH.ROTATE:if(!1===i.enableRotate)return;F(),l=a.TOUCH_ROTATE;break;case r.TOUCH.PAN:if(!1===i.enablePan)return;$(),l=a.TOUCH_PAN;break;default:l=a.NONE}break;case 2:switch(i.touches.TWO){case r.TOUCH.DOLLY_PAN:if(!1===i.enableZoom&&!1===i.enablePan)return;i.enableZoom&&B(),i.enablePan&&$(),l=a.TOUCH_DOLLY_PAN;break;case r.TOUCH.DOLLY_ROTATE:if(!1===i.enableZoom&&!1===i.enableRotate)return;i.enableZoom&&B(),i.enableRotate&&F(),l=a.TOUCH_DOLLY_ROTATE;break;default:l=a.NONE}break;default:l=a.NONE}l!==a.NONE&&i.dispatchEvent(n)}(e):function(e){let t;switch(e.button){case 0:t=i.mouseButtons.LEFT;break;case 1:t=i.mouseButtons.MIDDLE;break;case 2:t=i.mouseButtons.RIGHT;break;default:t=-1}switch(t){case r.MOUSE.DOLLY:if(!1===i.enableZoom)return;!function(e){y.set(e.clientX,e.clientY)}(e),l=a.DOLLY;break;case r.MOUSE.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===i.enablePan)return;D(e),l=a.PAN}else{if(!1===i.enableRotate)return;R(e),l=a.ROTATE}break;case r.MOUSE.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===i.enableRotate)return;R(e),l=a.ROTATE}else{if(!1===i.enablePan)return;D(e),l=a.PAN}break;default:l=a.NONE}l!==a.NONE&&i.dispatchEvent(n)}(e))}function I(e){!1!==i.enabled&&("touch"===e.pointerType?function(e){switch(K(e),l){case a.TOUCH_ROTATE:if(!1===i.enableRotate)return;H(e),i.update();break;case a.TOUCH_PAN:if(!1===i.enablePan)return;U(e),i.update();break;case a.TOUCH_DOLLY_PAN:if(!1===i.enableZoom&&!1===i.enablePan)return;!function(e){i.enableZoom&&V(e),i.enablePan&&U(e)}(e),i.update();break;case a.TOUCH_DOLLY_ROTATE:if(!1===i.enableZoom&&!1===i.enableRotate)return;!function(e){i.enableZoom&&V(e),i.enableRotate&&H(e)}(e),i.update();break;default:l=a.NONE}}(e):function(e){if(!1===i.enabled)return;switch(l){case a.ROTATE:if(!1===i.enableRotate)return;!function(e){f.set(e.clientX,e.clientY),v.subVectors(f,g).multiplyScalar(i.rotateSpeed);const t=i.domElement;T(2*Math.PI*v.x/t.clientHeight),j(2*Math.PI*v.y/t.clientHeight),g.copy(f),i.update()}(e);break;case a.DOLLY:if(!1===i.enableZoom)return;!function(e){A.set(e.clientX,e.clientY),E.subVectors(A,y),E.y>0?L(_()):E.y<0&&O(_()),y.copy(A),i.update()}(e);break;case a.PAN:if(!1===i.enablePan)return;!function(e){w.set(e.clientX,e.clientY),x.subVectors(w,b).multiplyScalar(i.panSpeed),k(x.x,x.y),b.copy(w),i.update()}(e)}}(e))}function N(e){Q(e),0===S.length&&(i.domElement.releasePointerCapture(e.pointerId),i.domElement.removeEventListener("pointermove",I),i.domElement.removeEventListener("pointerup",N)),i.dispatchEvent(o),l=a.NONE}function Y(e){Q(e)}function W(e){!1!==i.enabled&&!1!==i.enableZoom&&l===a.NONE&&(e.preventDefault(),i.dispatchEvent(n),function(e){e.deltaY<0?O(_()):e.deltaY>0&&L(_()),i.update()}(e),i.dispatchEvent(o))}function G(e){!1!==i.enabled&&!1!==i.enablePan&&function(e){let t=!1;switch(e.code){case i.keys.UP:k(0,i.keyPanSpeed),t=!0;break;case i.keys.BOTTOM:k(0,-i.keyPanSpeed),t=!0;break;case i.keys.LEFT:k(i.keyPanSpeed,0),t=!0;break;case i.keys.RIGHT:k(-i.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),i.update())}(e)}function X(e){!1!==i.enabled&&e.preventDefault()}function Q(e){delete C[e.pointerId];for(let t=0;t<S.length;t++)if(S[t].pointerId==e.pointerId)return void S.splice(t,1)}function K(e){let t=C[e.pointerId];void 0===t&&(t=new r.Vector2,C[e.pointerId]=t),t.set(e.pageX,e.pageY)}function Z(e){const t=e.pointerId===S[0].pointerId?S[1]:S[0];return C[t.pointerId]}i.domElement.addEventListener("contextmenu",X),i.domElement.addEventListener("pointerdown",z),i.domElement.addEventListener("pointercancel",Y),i.domElement.addEventListener("wheel",W,{passive:!1}),this.update()}}class l extends a{constructor(e,t){super(e,t),this.screenSpacePanning=!1,this.mouseButtons.LEFT=r.MOUSE.PAN,this.mouseButtons.RIGHT=r.MOUSE.ROTATE,this.touches.ONE=r.TOUCH.PAN,this.touches.TWO=r.TOUCH.DOLLY_ROTATE}}},"./src/js/app/jsm/libs/lil-gui.module.min.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>b,BooleanController:()=>s,ColorController:()=>c,Controller:()=>r,FunctionController:()=>u,GUI:()=>v,NumberController:()=>p,OptionController:()=>m,StringController:()=>g});class r{constructor(e,t,i,s,n="div"){this.parent=e,this.object=t,this.property=i,this._disabled=!1,this.initialValue=this.getValue(),this.domElement=document.createElement("div"),this.domElement.classList.add("controller"),this.domElement.classList.add(s),this.$name=document.createElement("div"),this.$name.classList.add("name"),r.nextNameID=r.nextNameID||0,this.$name.id="lil-gui-name-"+ ++r.nextNameID,this.$widget=document.createElement(n),this.$widget.classList.add("widget"),this.$disable=this.$widget,this.domElement.appendChild(this.$name),this.domElement.appendChild(this.$widget),this.parent.children.push(this),this.parent.controllers.push(this),this.parent.$children.appendChild(this.domElement),this._listenCallback=this._listenCallback.bind(this),this.name(i)}name(e){return this._name=e,this.$name.innerHTML=e,this}onChange(e){return this._onChange=e,this}_callOnChange(){this.parent._callOnChange(this),void 0!==this._onChange&&this._onChange.call(this,this.getValue()),this._changed=!0}onFinishChange(e){return this._onFinishChange=e,this}_callOnFinishChange(){this._changed&&(this.parent._callOnFinishChange(this),void 0!==this._onFinishChange&&this._onFinishChange.call(this,this.getValue())),this._changed=!1}reset(){return this.setValue(this.initialValue),this._callOnFinishChange(),this}enable(e=!0){return this.disable(!e)}disable(e=!0){return e===this._disabled||(this._disabled=e,this.domElement.classList.toggle("disabled",e),this.$disable.toggleAttribute("disabled",e)),this}options(e){const t=this.parent.add(this.object,this.property,e);return t.name(this._name),this.destroy(),t}min(e){return this}max(e){return this}step(e){return this}listen(e=!0){return this._listening=e,void 0!==this._listenCallbackID&&(cancelAnimationFrame(this._listenCallbackID),this._listenCallbackID=void 0),this._listening&&this._listenCallback(),this}_listenCallback(){this._listenCallbackID=requestAnimationFrame(this._listenCallback),this.updateDisplay()}getValue(){return this.object[this.property]}setValue(e){return this.object[this.property]=e,this._callOnChange(),this.updateDisplay(),this}updateDisplay(){return this}load(e){return this.setValue(e),this._callOnFinishChange(),this}save(){return this.getValue()}destroy(){this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.controllers.splice(this.parent.controllers.indexOf(this),1),this.parent.$children.removeChild(this.domElement)}}class s extends r{constructor(e,t,i){super(e,t,i,"boolean","label"),this.$input=document.createElement("input"),this.$input.setAttribute("type","checkbox"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$input.addEventListener("change",(()=>{this.setValue(this.$input.checked),this._callOnFinishChange()})),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.checked=this.getValue(),this}}function n(e){let t,i;return(t=e.match(/(#|0x)?([a-f0-9]{6})/i))?i=t[2]:(t=e.match(/rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\)/))?i=parseInt(t[1]).toString(16).padStart(2,0)+parseInt(t[2]).toString(16).padStart(2,0)+parseInt(t[3]).toString(16).padStart(2,0):(t=e.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i))&&(i=t[1]+t[1]+t[2]+t[2]+t[3]+t[3]),!!i&&"#"+i}const o={isPrimitive:!0,match:e=>"string"==typeof e,fromHexString:n,toHexString:n},a={isPrimitive:!0,match:e=>"number"==typeof e,fromHexString:e=>parseInt(e.substring(1),16),toHexString:e=>"#"+e.toString(16).padStart(6,0)},l={isPrimitive:!1,match:Array.isArray,fromHexString(e,t,i=1){const r=a.fromHexString(e);t[0]=(r>>16&255)/255*i,t[1]=(r>>8&255)/255*i,t[2]=(255&r)/255*i},toHexString:([e,t,i],r=1)=>a.toHexString(e*(r=255/r)<<16^t*r<<8^i*r<<0)},h={isPrimitive:!1,match:e=>Object(e)===e,fromHexString(e,t,i=1){const r=a.fromHexString(e);t.r=(r>>16&255)/255*i,t.g=(r>>8&255)/255*i,t.b=(255&r)/255*i},toHexString:({r:e,g:t,b:i},r=1)=>a.toHexString(e*(r=255/r)<<16^t*r<<8^i*r<<0)},d=[o,a,l,h];class c extends r{constructor(e,t,i,r){var s;super(e,t,i,"color"),this.$input=document.createElement("input"),this.$input.setAttribute("type","color"),this.$input.setAttribute("tabindex",-1),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$text=document.createElement("input"),this.$text.setAttribute("type","text"),this.$text.setAttribute("spellcheck","false"),this.$text.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this.$display.appendChild(this.$input),this.$widget.appendChild(this.$display),this.$widget.appendChild(this.$text),this._format=(s=this.initialValue,d.find((e=>e.match(s)))),this._rgbScale=r,this._initialValueHexString=this.save(),this._textFocused=!1,this.$input.addEventListener("input",(()=>{this._setValueFromHexString(this.$input.value)})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$text.addEventListener("input",(()=>{const e=n(this.$text.value);e&&this._setValueFromHexString(e)})),this.$text.addEventListener("focus",(()=>{this._textFocused=!0,this.$text.select()})),this.$text.addEventListener("blur",(()=>{this._textFocused=!1,this.updateDisplay(),this._callOnFinishChange()})),this.$disable=this.$text,this.updateDisplay()}reset(){return this._setValueFromHexString(this._initialValueHexString),this}_setValueFromHexString(e){if(this._format.isPrimitive){const t=this._format.fromHexString(e);this.setValue(t)}else this._format.fromHexString(e,this.getValue(),this._rgbScale),this._callOnChange(),this.updateDisplay()}save(){return this._format.toHexString(this.getValue(),this._rgbScale)}load(e){return this._setValueFromHexString(e),this._callOnFinishChange(),this}updateDisplay(){return this.$input.value=this._format.toHexString(this.getValue(),this._rgbScale),this._textFocused||(this.$text.value=this.$input.value.substring(1)),this.$display.style.backgroundColor=this.$input.value,this}}class u extends r{constructor(e,t,i){super(e,t,i,"function"),this.$button=document.createElement("button"),this.$button.appendChild(this.$name),this.$widget.appendChild(this.$button),this.$button.addEventListener("click",(e=>{e.preventDefault(),this.getValue().call(this.object)})),this.$button.addEventListener("touchstart",(()=>{})),this.$disable=this.$button}}class p extends r{constructor(e,t,i,r,s,n){super(e,t,i,"number"),this._initInput(),this.min(r),this.max(s);const o=void 0!==n;this.step(o?n:this._getImplicitStep(),o),this.updateDisplay()}min(e){return this._min=e,this._onUpdateMinMax(),this}max(e){return this._max=e,this._onUpdateMinMax(),this}step(e,t=!0){return this._step=e,this._stepExplicit=t,this}updateDisplay(){const e=this.getValue();if(this._hasSlider){let t=(e-this._min)/(this._max-this._min);t=Math.max(0,Math.min(t,1)),this.$fill.style.width=100*t+"%"}return this._inputFocused||(this.$input.value=e),this}_initInput(){this.$input=document.createElement("input"),this.$input.setAttribute("type","number"),this.$input.setAttribute("step","any"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$disable=this.$input;const e=e=>{const t=parseFloat(this.$input.value);isNaN(t)||(this._snapClampSetValue(t+e),this.$input.value=this.getValue())};let t,i,r,s,n,o=!1;const a=e=>{if(o){const r=e.clientX-t,s=e.clientY-i;Math.abs(s)>5?(e.preventDefault(),this.$input.blur(),o=!1,this._setDraggingStyle(!0,"vertical")):Math.abs(r)>5&&l()}if(!o){const t=e.clientY-r;n-=t*this._step*this._arrowKeyMultiplier(e),s+n>this._max?n=this._max-s:s+n<this._min&&(n=this._min-s),this._snapClampSetValue(s+n)}r=e.clientY},l=()=>{this._setDraggingStyle(!1,"vertical"),this._callOnFinishChange(),window.removeEventListener("mousemove",a),window.removeEventListener("mouseup",l)};this.$input.addEventListener("input",(()=>{const e=parseFloat(this.$input.value);isNaN(e)||this.setValue(this._clamp(e))})),this.$input.addEventListener("keydown",(t=>{"Enter"===t.code&&this.$input.blur(),"ArrowUp"===t.code&&(t.preventDefault(),e(this._step*this._arrowKeyMultiplier(t))),"ArrowDown"===t.code&&(t.preventDefault(),e(this._step*this._arrowKeyMultiplier(t)*-1))})),this.$input.addEventListener("wheel",(t=>{this._inputFocused&&(t.preventDefault(),e(this._step*this._normalizeMouseWheel(t)))})),this.$input.addEventListener("mousedown",(e=>{t=e.clientX,i=r=e.clientY,o=!0,s=this.getValue(),n=0,window.addEventListener("mousemove",a),window.addEventListener("mouseup",l)})),this.$input.addEventListener("focus",(()=>{this._inputFocused=!0})),this.$input.addEventListener("blur",(()=>{this._inputFocused=!1,this.updateDisplay(),this._callOnFinishChange()}))}_initSlider(){this._hasSlider=!0,this.$slider=document.createElement("div"),this.$slider.classList.add("slider"),this.$fill=document.createElement("div"),this.$fill.classList.add("fill"),this.$slider.appendChild(this.$fill),this.$widget.insertBefore(this.$slider,this.$input),this.domElement.classList.add("hasSlider");const e=e=>{const t=this.$slider.getBoundingClientRect();let i=(r=e,s=t.left,n=t.right,o=this._min,(r-s)/(n-s)*(this._max-o)+o);var r,s,n,o;this._snapClampSetValue(i)},t=t=>{e(t.clientX)},i=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("mousemove",t),window.removeEventListener("mouseup",i)};let r,s,n=!1;const o=t=>{t.preventDefault(),this._setDraggingStyle(!0),e(t.touches[0].clientX),n=!1},a=t=>{if(n){const e=t.touches[0].clientX-r,i=t.touches[0].clientY-s;Math.abs(e)>Math.abs(i)?o(t):(window.removeEventListener("touchmove",a),window.removeEventListener("touchend",l))}else t.preventDefault(),e(t.touches[0].clientX)},l=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("touchmove",a),window.removeEventListener("touchend",l)},h=this._callOnFinishChange.bind(this);let d;this.$slider.addEventListener("mousedown",(r=>{this._setDraggingStyle(!0),e(r.clientX),window.addEventListener("mousemove",t),window.addEventListener("mouseup",i)})),this.$slider.addEventListener("touchstart",(e=>{e.touches.length>1||(this._hasScrollBar?(r=e.touches[0].clientX,s=e.touches[0].clientY,n=!0):o(e),window.addEventListener("touchmove",a),window.addEventListener("touchend",l))})),this.$slider.addEventListener("wheel",(e=>{if(Math.abs(e.deltaX)<Math.abs(e.deltaY)&&this._hasScrollBar)return;e.preventDefault();const t=this._normalizeMouseWheel(e)*this._step;this._snapClampSetValue(this.getValue()+t),this.$input.value=this.getValue(),clearTimeout(d),d=setTimeout(h,400)}))}_setDraggingStyle(e,t="horizontal"){this.$slider&&this.$slider.classList.toggle("active",e),document.body.classList.toggle("lil-gui-dragging",e),document.body.classList.toggle("lil-gui-"+t,e)}_getImplicitStep(){return this._hasMin&&this._hasMax?(this._max-this._min)/1e3:.1}_onUpdateMinMax(){!this._hasSlider&&this._hasMin&&this._hasMax&&(this._stepExplicit||this.step(this._getImplicitStep(),!1),this._initSlider(),this.updateDisplay())}_normalizeMouseWheel(e){let{deltaX:t,deltaY:i}=e;return Math.floor(e.deltaY)!==e.deltaY&&e.wheelDelta&&(t=0,i=-e.wheelDelta/120,i*=this._stepExplicit?1:10),t+-i}_arrowKeyMultiplier(e){let t=this._stepExplicit?1:10;return e.shiftKey?t*=10:e.altKey&&(t/=10),t}_snap(e){const t=Math.round(e/this._step)*this._step;return parseFloat(t.toPrecision(15))}_clamp(e){return e<this._min&&(e=this._min),e>this._max&&(e=this._max),e}_snapClampSetValue(e){this.setValue(this._clamp(this._snap(e)))}get _hasScrollBar(){const e=this.parent.root.$children;return e.scrollHeight>e.clientHeight}get _hasMin(){return void 0!==this._min}get _hasMax(){return void 0!==this._max}}class m extends r{constructor(e,t,i,r){super(e,t,i,"option"),this.$select=document.createElement("select"),this.$select.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this._values=Array.isArray(r)?r:Object.values(r),this._names=Array.isArray(r)?r:Object.keys(r),this._names.forEach((e=>{const t=document.createElement("option");t.innerHTML=e,this.$select.appendChild(t)})),this.$select.addEventListener("change",(()=>{this.setValue(this._values[this.$select.selectedIndex]),this._callOnFinishChange()})),this.$select.addEventListener("focus",(()=>{this.$display.classList.add("focus")})),this.$select.addEventListener("blur",(()=>{this.$display.classList.remove("focus")})),this.$widget.appendChild(this.$select),this.$widget.appendChild(this.$display),this.$disable=this.$select,this.updateDisplay()}updateDisplay(){const e=this.getValue(),t=this._values.indexOf(e);return this.$select.selectedIndex=t,this.$display.innerHTML=-1===t?e:this._names[t],this}}class g extends r{constructor(e,t,i){super(e,t,i,"string"),this.$input=document.createElement("input"),this.$input.setAttribute("type","text"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$input.addEventListener("input",(()=>{this.setValue(this.$input.value)})),this.$input.addEventListener("keydown",(e=>{"Enter"===e.code&&this.$input.blur()})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$widget.appendChild(this.$input),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.value=this.getValue(),this}}let f=!1;class v{constructor({parent:e,autoPlace:t=void 0===e,container:i,width:r,title:s="Controls",injectStyles:n=!0,touchStyles:o=!0}={}){if(this.parent=e,this.root=e?e.root:this,this.children=[],this.controllers=[],this.folders=[],this._closed=!1,this._hidden=!1,this.domElement=document.createElement("div"),this.domElement.classList.add("lil-gui"),this.$title=document.createElement("div"),this.$title.classList.add("title"),this.$title.setAttribute("role","button"),this.$title.setAttribute("aria-expanded",!0),this.$title.setAttribute("tabindex",0),this.$title.addEventListener("click",(()=>this.openAnimated(this._closed))),this.$title.addEventListener("keydown",(e=>{"Enter"!==e.code&&"Space"!==e.code||(e.preventDefault(),this.$title.click())})),this.$title.addEventListener("touchstart",(()=>{})),this.$children=document.createElement("div"),this.$children.classList.add("children"),this.domElement.appendChild(this.$title),this.domElement.appendChild(this.$children),this.title(s),o&&this.domElement.classList.add("allow-touch-styles"),this.parent)return this.parent.children.push(this),this.parent.folders.push(this),void this.parent.$children.appendChild(this.domElement);this.domElement.classList.add("root"),!f&&n&&(function(e){const t=document.createElement("style");t.innerHTML='.lil-gui{--background-color:#1f1f1f;--text-color:#ebebeb;--title-background-color:#111;--title-text-color:#ebebeb;--widget-color:#424242;--hover-color:#4f4f4f;--focus-color:#595959;--number-color:#2cc9ff;--string-color:#a2db3c;--font-size:11px;--input-font-size:11px;--font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Arial,sans-serif;--font-family-mono:Menlo,Monaco,Consolas,"Droid Sans Mono",monospace;--padding:4px;--spacing:4px;--widget-height:20px;--name-width:45%;--slider-knob-width:2px;--slider-input-width:27%;--color-input-width:27%;--slider-input-min-width:45px;--color-input-min-width:45px;--folder-indent:7px;--widget-padding:0 0 0 3px;--widget-border-radius:2px;--checkbox-size:calc(var(--widget-height)*0.75);--scrollbar-width:5px;background-color:var(--background-color);color:var(--text-color);font-family:var(--font-family);font-size:var(--font-size);font-style:normal;font-weight:400;line-height:1;text-align:left;touch-action:manipulation;user-select:none;-webkit-user-select:none}.lil-gui,.lil-gui *{box-sizing:border-box;margin:0;padding:0}.lil-gui.root{display:flex;flex-direction:column;width:var(--width,245px)}.lil-gui.root>.title{background:var(--title-background-color);color:var(--title-text-color)}.lil-gui.root>.children{overflow-x:hidden;overflow-y:auto}.lil-gui.root>.children::-webkit-scrollbar{background:var(--background-color);height:var(--scrollbar-width);width:var(--scrollbar-width)}.lil-gui.root>.children::-webkit-scrollbar-thumb{background:var(--focus-color);border-radius:var(--scrollbar-width)}.lil-gui.force-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}.lil-gui.autoPlace{max-height:100%;position:fixed;right:15px;top:0;z-index:1001}.lil-gui .controller{align-items:center;display:flex;margin:var(--spacing) 0;padding:0 var(--padding)}.lil-gui .controller.disabled{opacity:.5}.lil-gui .controller.disabled,.lil-gui .controller.disabled *{pointer-events:none!important}.lil-gui .controller>.name{flex-shrink:0;line-height:var(--widget-height);min-width:var(--name-width);padding-right:var(--spacing);white-space:pre}.lil-gui .controller .widget{align-items:center;display:flex;min-height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.string input{color:var(--string-color)}.lil-gui .controller.boolean .widget{cursor:pointer}.lil-gui .controller.color .display{border-radius:var(--widget-border-radius);height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.color input[type=color]{cursor:pointer;height:100%;opacity:0;width:100%}.lil-gui .controller.color input[type=text]{flex-shrink:0;font-family:var(--font-family-mono);margin-left:var(--spacing);min-width:var(--color-input-min-width);width:var(--color-input-width)}.lil-gui .controller.option select{max-width:100%;opacity:0;position:absolute;width:100%}.lil-gui .controller.option .display{background:var(--widget-color);border-radius:var(--widget-border-radius);height:var(--widget-height);line-height:var(--widget-height);max-width:100%;overflow:hidden;padding-left:.55em;padding-right:1.75em;pointer-events:none;position:relative;word-break:break-all}.lil-gui .controller.option .display.active{background:var(--focus-color)}.lil-gui .controller.option .display:after{bottom:0;content:"↕";font-family:lil-gui;padding-right:.375em;position:absolute;right:0;top:0}.lil-gui .controller.option .widget,.lil-gui .controller.option select{cursor:pointer}.lil-gui .controller.number input{color:var(--number-color)}.lil-gui .controller.number.hasSlider input{flex-shrink:0;margin-left:var(--spacing);min-width:var(--slider-input-min-width);width:var(--slider-input-width)}.lil-gui .controller.number .slider{background-color:var(--widget-color);border-radius:var(--widget-border-radius);cursor:ew-resize;height:var(--widget-height);overflow:hidden;padding-right:var(--slider-knob-width);touch-action:pan-y;width:100%}.lil-gui .controller.number .slider.active{background-color:var(--focus-color)}.lil-gui .controller.number .slider.active .fill{opacity:.95}.lil-gui .controller.number .fill{border-right:var(--slider-knob-width) solid var(--number-color);box-sizing:content-box;height:100%}.lil-gui-dragging .lil-gui{--hover-color:var(--widget-color)}.lil-gui-dragging *{cursor:ew-resize!important}.lil-gui-dragging.lil-gui-vertical *{cursor:ns-resize!important}.lil-gui .title{--title-height:calc(var(--widget-height) + var(--spacing)*1.25);-webkit-tap-highlight-color:transparent;text-decoration-skip:objects;cursor:pointer;font-weight:600;height:var(--title-height);line-height:calc(var(--title-height) - 4px);outline:none;padding:0 var(--padding)}.lil-gui .title:before{content:"▾";display:inline-block;font-family:lil-gui;padding-right:2px}.lil-gui .title:active{background:var(--title-background-color);opacity:.75}.lil-gui.root>.title:focus{text-decoration:none!important}.lil-gui.closed>.title:before{content:"▸"}.lil-gui.closed>.children{opacity:0;transform:translateY(-7px)}.lil-gui.closed:not(.transition)>.children{display:none}.lil-gui.transition>.children{overflow:hidden;pointer-events:none;transition-duration:.3s;transition-property:height,opacity,transform;transition-timing-function:cubic-bezier(.2,.6,.35,1)}.lil-gui .children:empty:before{content:"Empty";display:block;font-style:italic;height:var(--widget-height);line-height:var(--widget-height);margin:var(--spacing) 0;opacity:.5;padding:0 var(--padding)}.lil-gui.root>.children>.lil-gui>.title{border-width:0;border-bottom:1px solid var(--widget-color);border-left:0 solid var(--widget-color);border-right:0 solid var(--widget-color);border-top:1px solid var(--widget-color);transition:border-color .3s}.lil-gui.root>.children>.lil-gui.closed>.title{border-bottom-color:transparent}.lil-gui+.controller{border-top:1px solid var(--widget-color);margin-top:0;padding-top:var(--spacing)}.lil-gui .lil-gui .lil-gui>.title{border:none}.lil-gui .lil-gui .lil-gui>.children{border:none;border-left:2px solid var(--widget-color);margin-left:var(--folder-indent)}.lil-gui .lil-gui .controller{border:none}.lil-gui input{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:0;border-radius:var(--widget-border-radius);color:var(--text-color);font-family:var(--font-family);font-size:var(--input-font-size);height:var(--widget-height);outline:none;width:100%}.lil-gui input:disabled{opacity:1}.lil-gui input[type=number],.lil-gui input[type=text]{padding:var(--widget-padding)}.lil-gui input[type=number]:focus,.lil-gui input[type=text]:focus{background:var(--focus-color)}.lil-gui input::-webkit-inner-spin-button,.lil-gui input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.lil-gui input[type=number]{-moz-appearance:textfield}.lil-gui input[type=checkbox]{appearance:none;-webkit-appearance:none;border-radius:var(--widget-border-radius);cursor:pointer;height:var(--checkbox-size);text-align:center;width:var(--checkbox-size)}.lil-gui input[type=checkbox]:checked:before{content:"✓";font-family:lil-gui;font-size:var(--checkbox-size);line-height:var(--checkbox-size)}.lil-gui button{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:1px solid var(--widget-color);border-radius:var(--widget-border-radius);color:var(--text-color);cursor:pointer;font-family:var(--font-family);font-size:var(--font-size);height:var(--widget-height);line-height:calc(var(--widget-height) - 4px);outline:none;text-align:center;text-transform:none;width:100%}.lil-gui button:active{background:var(--focus-color)}@font-face{font-family:lil-gui;src:url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff")}@media (pointer:coarse){.lil-gui.allow-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}}@media (hover:hover){.lil-gui .controller.color .display:hover:before{border:1px solid #fff9;border-radius:var(--widget-border-radius);bottom:0;content:" ";display:block;left:0;position:absolute;right:0;top:0}.lil-gui .controller.option .display.focus{background:var(--focus-color)}.lil-gui .controller.option .widget:hover .display{background:var(--hover-color)}.lil-gui .controller.number .slider:hover{background-color:var(--hover-color)}body:not(.lil-gui-dragging) .lil-gui .title:hover{background:var(--title-background-color);opacity:.85}.lil-gui .title:focus{text-decoration:underline var(--focus-color)}.lil-gui input:hover{background:var(--hover-color)}.lil-gui input:active{background:var(--focus-color)}.lil-gui input[type=checkbox]:focus{box-shadow:inset 0 0 0 1px var(--focus-color)}.lil-gui button:hover{background:var(--hover-color);border-color:var(--hover-color)}.lil-gui button:focus{border-color:var(--focus-color)}}';const i=document.querySelector("head link[rel=stylesheet], head style");i?document.head.insertBefore(t,i):document.head.appendChild(t)}(),f=!0),i?i.appendChild(this.domElement):t&&(this.domElement.classList.add("autoPlace"),document.body.appendChild(this.domElement)),r&&this.domElement.style.setProperty("--width",r+"px"),this.domElement.addEventListener("keydown",(e=>e.stopPropagation())),this.domElement.addEventListener("keyup",(e=>e.stopPropagation()))}add(e,t,i,r,n){if(Object(i)===i)return new m(this,e,t,i);const o=e[t];switch(typeof o){case"number":return new p(this,e,t,i,r,n);case"boolean":return new s(this,e,t);case"string":return new g(this,e,t);case"function":return new u(this,e,t)}console.error("gui.add failed\n\tproperty:",t,"\n\tobject:",e,"\n\tvalue:",o)}addColor(e,t,i=1){return new c(this,e,t,i)}addFolder(e){return new v({parent:this,title:e})}load(e,t=!0){return e.controllers&&this.controllers.forEach((t=>{t instanceof u||t._name in e.controllers&&t.load(e.controllers[t._name])})),t&&e.folders&&this.folders.forEach((t=>{t._title in e.folders&&t.load(e.folders[t._title])})),this}save(e=!0){const t={controllers:{},folders:{}};return this.controllers.forEach((e=>{if(!(e instanceof u)){if(e._name in t.controllers)throw new Error(`Cannot save GUI with duplicate property "${e._name}"`);t.controllers[e._name]=e.save()}})),e&&this.folders.forEach((e=>{if(e._title in t.folders)throw new Error(`Cannot save GUI with duplicate folder "${e._title}"`);t.folders[e._title]=e.save()})),t}open(e=!0){return this._closed=!e,this.$title.setAttribute("aria-expanded",!this._closed),this.domElement.classList.toggle("closed",this._closed),this}close(){return this.open(!1)}show(e=!0){return this._hidden=!e,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}openAnimated(e=!0){return this._closed=!e,this.$title.setAttribute("aria-expanded",!this._closed),requestAnimationFrame((()=>{const t=this.$children.clientHeight;this.$children.style.height=t+"px",this.domElement.classList.add("transition");const i=e=>{e.target===this.$children&&(this.$children.style.height="",this.domElement.classList.remove("transition"),this.$children.removeEventListener("transitionend",i))};this.$children.addEventListener("transitionend",i);const r=e?this.$children.scrollHeight:0;this.domElement.classList.toggle("closed",!e),requestAnimationFrame((()=>{this.$children.style.height=r+"px"}))})),this}title(e){return this._title=e,this.$title.innerHTML=e,this}reset(e=!0){return(e?this.controllersRecursive():this.controllers).forEach((e=>e.reset())),this}onChange(e){return this._onChange=e,this}_callOnChange(e){this.parent&&this.parent._callOnChange(e),void 0!==this._onChange&&this._onChange.call(this,{object:e.object,property:e.property,value:e.getValue(),controller:e})}onFinishChange(e){return this._onFinishChange=e,this}_callOnFinishChange(e){this.parent&&this.parent._callOnFinishChange(e),void 0!==this._onFinishChange&&this._onFinishChange.call(this,{object:e.object,property:e.property,value:e.getValue(),controller:e})}destroy(){this.parent&&(this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.folders.splice(this.parent.folders.indexOf(this),1)),this.domElement.parentElement&&this.domElement.parentElement.removeChild(this.domElement),Array.from(this.children).forEach((e=>e.destroy()))}controllersRecursive(){let e=Array.from(this.controllers);return this.folders.forEach((t=>{e=e.concat(t.controllersRecursive())})),e}foldersRecursive(){let e=Array.from(this.folders);return this.folders.forEach((t=>{e=e.concat(t.foldersRecursive())})),e}}const b=v},"./src/js/app/jsm/libs/stats.module.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>s});var r=function(){var e=0,t=document.createElement("div");function i(e){return t.appendChild(e.dom),e}function s(i){for(var r=0;r<t.children.length;r++)t.children[r].style.display=r===i?"block":"none";e=i}t.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",t.addEventListener("click",(function(i){i.preventDefault(),s(++e%t.children.length)}),!1);var n=(performance||Date).now(),o=n,a=0,l=i(new r.Panel("FPS","#0ff","#002")),h=i(new r.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var d=i(new r.Panel("MB","#f08","#201"));return s(0),{REVISION:16,dom:t,addPanel:i,showPanel:s,begin:function(){n=(performance||Date).now()},end:function(){a++;var e=(performance||Date).now();if(h.update(e-n,200),e>=o+1e3&&(l.update(1e3*a/(e-o),100),o=e,a=0,d)){var t=performance.memory;d.update(t.usedJSHeapSize/1048576,t.jsHeapSizeLimit/1048576)}return e},update:function(){n=this.end()},domElement:t,setMode:s}};r.Panel=function(e,t,i){var r=1/0,s=0,n=Math.round,o=n(window.devicePixelRatio||1),a=80*o,l=48*o,h=3*o,d=2*o,c=3*o,u=15*o,p=74*o,m=30*o,g=document.createElement("canvas");g.width=a,g.height=l,g.style.cssText="width:80px;height:48px";var f=g.getContext("2d");return f.font="bold "+9*o+"px Helvetica,Arial,sans-serif",f.textBaseline="top",f.fillStyle=i,f.fillRect(0,0,a,l),f.fillStyle=t,f.fillText(e,h,d),f.fillRect(c,u,p,m),f.fillStyle=i,f.globalAlpha=.9,f.fillRect(c,u,p,m),{dom:g,update:function(l,v){r=Math.min(r,l),s=Math.max(s,l),f.fillStyle=i,f.globalAlpha=1,f.fillRect(0,0,a,u),f.fillStyle=t,f.fillText(n(l)+" "+e+" ("+n(r)+"-"+n(s)+")",h,d),f.drawImage(g,c+o,u,p-o,m,c,u,p-o,m),f.fillRect(c+p-o,u,o,m),f.fillStyle=i,f.globalAlpha=.9,f.fillRect(c+p-o,u,o,n((1-l/v)*m))}}};const s=r},"./src/js/app/jsm/postprocessing/AfterimagePass.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{AfterimagePass:()=>o});var r=i("./node_modules/three/build/three.module.js"),s=i("./src/js/app/jsm/postprocessing/Pass.js"),n=i("./src/js/app/jsm/shaders/AfterimageShader.js");class o extends s.Pass{constructor(e=.96){super(),void 0===n.AfterimageShader&&console.error("THREE.AfterimagePass relies on AfterimageShader"),this.shader=n.AfterimageShader,this.uniforms=r.UniformsUtils.clone(this.shader.uniforms),this.uniforms.damp.value=e,this.textureComp=new r.WebGLRenderTarget(window.innerWidth,window.innerHeight,{minFilter:r.LinearFilter,magFilter:r.NearestFilter,format:r.RGBAFormat}),this.textureOld=new r.WebGLRenderTarget(window.innerWidth,window.innerHeight,{minFilter:r.LinearFilter,magFilter:r.NearestFilter,format:r.RGBAFormat}),this.shaderMaterial=new r.ShaderMaterial({uniforms:this.uniforms,vertexShader:this.shader.vertexShader,fragmentShader:this.shader.fragmentShader}),this.compFsQuad=new s.FullScreenQuad(this.shaderMaterial);const t=new r.MeshBasicMaterial;this.copyFsQuad=new s.FullScreenQuad(t)}render(e,t,i){this.uniforms.tOld.value=this.textureOld.texture,this.uniforms.tNew.value=i.texture,e.setRenderTarget(this.textureComp),this.compFsQuad.render(e),this.copyFsQuad.material.map=this.textureComp.texture,this.renderToScreen?(e.setRenderTarget(null),this.copyFsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(),this.copyFsQuad.render(e));const r=this.textureOld;this.textureOld=this.textureComp,this.textureComp=r}setSize(e,t){this.textureComp.setSize(e,t),this.textureOld.setSize(e,t)}}},"./src/js/app/jsm/postprocessing/EffectComposer.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{EffectComposer:()=>a,Pass:()=>l,FullScreenQuad:()=>c});var r=i("./node_modules/three/build/three.module.js"),s=i("./src/js/app/jsm/shaders/CopyShader.js"),n=i("./src/js/app/jsm/postprocessing/ShaderPass.js"),o=i("./src/js/app/jsm/postprocessing/MaskPass.js");class a{constructor(e,t){if(this.renderer=e,void 0===t){const i={minFilter:r.LinearFilter,magFilter:r.LinearFilter,format:r.RGBAFormat},s=e.getSize(new r.Vector2);this._pixelRatio=e.getPixelRatio(),this._width=s.width,this._height=s.height,(t=new r.WebGLRenderTarget(this._width*this._pixelRatio,this._height*this._pixelRatio,i)).texture.name="EffectComposer.rt1"}else this._pixelRatio=1,this._width=t.width,this._height=t.height;this.renderTarget1=t,this.renderTarget2=t.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],void 0===s.CopyShader&&console.error("THREE.EffectComposer relies on CopyShader"),void 0===n.ShaderPass&&console.error("THREE.EffectComposer relies on ShaderPass"),this.copyPass=new n.ShaderPass(s.CopyShader),this.clock=new r.Clock}swapBuffers(){const e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e}addPass(e){this.passes.push(e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(e,t){this.passes.splice(t,0,e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(e){const t=this.passes.indexOf(e);-1!==t&&this.passes.splice(t,1)}isLastEnabledPass(e){for(let t=e+1;t<this.passes.length;t++)if(this.passes[t].enabled)return!1;return!0}render(e){void 0===e&&(e=this.clock.getDelta());const t=this.renderer.getRenderTarget();let i=!1;for(let t=0,r=this.passes.length;t<r;t++){const r=this.passes[t];if(!1!==r.enabled){if(r.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(t),r.render(this.renderer,this.writeBuffer,this.readBuffer,e,i),r.needsSwap){if(i){const t=this.renderer.getContext(),i=this.renderer.state.buffers.stencil;i.setFunc(t.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),i.setFunc(t.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==o.MaskPass&&(r instanceof o.MaskPass?i=!0:r instanceof o.ClearMaskPass&&(i=!1))}}this.renderer.setRenderTarget(t)}reset(e){if(void 0===e){const t=this.renderer.getSize(new r.Vector2);this._pixelRatio=this.renderer.getPixelRatio(),this._width=t.width,this._height=t.height,(e=this.renderTarget1.clone()).setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=e,this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(e,t){this._width=e,this._height=t;const i=this._width*this._pixelRatio,r=this._height*this._pixelRatio;this.renderTarget1.setSize(i,r),this.renderTarget2.setSize(i,r);for(let e=0;e<this.passes.length;e++)this.passes[e].setSize(i,r)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}}class l{constructor(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}const h=new r.OrthographicCamera(-1,1,1,-1,0,1),d=new r.BufferGeometry;d.setAttribute("position",new r.Float32BufferAttribute([-1,3,0,-1,-1,0,3,-1,0],3)),d.setAttribute("uv",new r.Float32BufferAttribute([0,2,0,0,2,0],2));class c{constructor(e){this._mesh=new r.Mesh(d,e)}dispose(){this._mesh.geometry.dispose()}render(e){e.render(this._mesh,h)}get material(){return this._mesh.material}set material(e){this._mesh.material=e}}},"./src/js/app/jsm/postprocessing/MaskPass.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{MaskPass:()=>s,ClearMaskPass:()=>n});var r=i("./src/js/app/jsm/postprocessing/Pass.js");class s extends r.Pass{constructor(e,t){super(),this.scene=e,this.camera=t,this.clear=!0,this.needsSwap=!1,this.inverse=!1}render(e,t,i){const r=e.getContext(),s=e.state;let n,o;s.buffers.color.setMask(!1),s.buffers.depth.setMask(!1),s.buffers.color.setLocked(!0),s.buffers.depth.setLocked(!0),this.inverse?(n=0,o=1):(n=1,o=0),s.buffers.stencil.setTest(!0),s.buffers.stencil.setOp(r.REPLACE,r.REPLACE,r.REPLACE),s.buffers.stencil.setFunc(r.ALWAYS,n,4294967295),s.buffers.stencil.setClear(o),s.buffers.stencil.setLocked(!0),e.setRenderTarget(i),this.clear&&e.clear(),e.render(this.scene,this.camera),e.setRenderTarget(t),this.clear&&e.clear(),e.render(this.scene,this.camera),s.buffers.color.setLocked(!1),s.buffers.depth.setLocked(!1),s.buffers.stencil.setLocked(!1),s.buffers.stencil.setFunc(r.EQUAL,1,4294967295),s.buffers.stencil.setOp(r.KEEP,r.KEEP,r.KEEP),s.buffers.stencil.setLocked(!0)}}class n extends r.Pass{constructor(){super(),this.needsSwap=!1}render(e){e.state.buffers.stencil.setLocked(!1),e.state.buffers.stencil.setTest(!1)}}},"./src/js/app/jsm/postprocessing/Pass.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{Pass:()=>s,FullScreenQuad:()=>a});var r=i("./node_modules/three/build/three.module.js");class s{constructor(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}const n=new r.OrthographicCamera(-1,1,1,-1,0,1),o=new r.BufferGeometry;o.setAttribute("position",new r.Float32BufferAttribute([-1,3,0,-1,-1,0,3,-1,0],3)),o.setAttribute("uv",new r.Float32BufferAttribute([0,2,0,0,2,0],2));class a{constructor(e){this._mesh=new r.Mesh(o,e)}dispose(){this._mesh.geometry.dispose()}render(e){e.render(this._mesh,n)}get material(){return this._mesh.material}set material(e){this._mesh.material=e}}},"./src/js/app/jsm/postprocessing/RenderPass.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{RenderPass:()=>n});var r=i("./node_modules/three/build/three.module.js"),s=i("./src/js/app/jsm/postprocessing/Pass.js");class n extends s.Pass{constructor(e,t,i,s,n){super(),this.scene=e,this.camera=t,this.overrideMaterial=i,this.clearColor=s,this.clearAlpha=void 0!==n?n:0,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this._oldClearColor=new r.Color}render(e,t,i){const r=e.autoClear;let s,n;e.autoClear=!1,void 0!==this.overrideMaterial&&(n=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor&&(e.getClearColor(this._oldClearColor),s=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha)),this.clearDepth&&e.clearDepth(),e.setRenderTarget(this.renderToScreen?null:i),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),e.render(this.scene,this.camera),this.clearColor&&e.setClearColor(this._oldClearColor,s),void 0!==this.overrideMaterial&&(this.scene.overrideMaterial=n),e.autoClear=r}}},"./src/js/app/jsm/postprocessing/ShaderPass.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{ShaderPass:()=>n});var r=i("./node_modules/three/build/three.module.js"),s=i("./src/js/app/jsm/postprocessing/Pass.js");class n extends s.Pass{constructor(e,t){super(),this.textureID=void 0!==t?t:"tDiffuse",e instanceof r.ShaderMaterial?(this.uniforms=e.uniforms,this.material=e):e&&(this.uniforms=r.UniformsUtils.clone(e.uniforms),this.material=new r.ShaderMaterial({defines:Object.assign({},e.defines),uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})),this.fsQuad=new s.FullScreenQuad(this.material)}render(e,t,i){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=i.texture),this.fsQuad.material=this.material,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),this.fsQuad.render(e))}}},"./src/js/app/jsm/postprocessing/UnrealBloomPass.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{UnrealBloomPass:()=>a});var r=i("./node_modules/three/build/three.module.js"),s=i("./src/js/app/jsm/postprocessing/Pass.js"),n=i("./src/js/app/jsm/shaders/CopyShader.js"),o=i("./src/js/app/jsm/shaders/LuminosityHighPassShader.js");class a extends s.Pass{constructor(e,t,i,a){super(),this.strength=void 0!==t?t:1,this.radius=i,this.threshold=a,this.resolution=void 0!==e?new r.Vector2(e.x,e.y):new r.Vector2(256,256),this.clearColor=new r.Color(0,0,0);const l={minFilter:r.LinearFilter,magFilter:r.LinearFilter,format:r.RGBAFormat};this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5;let h=Math.round(this.resolution.x/2),d=Math.round(this.resolution.y/2);this.renderTargetBright=new r.WebGLRenderTarget(h,d,l),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1;for(let e=0;e<this.nMips;e++){const t=new r.WebGLRenderTarget(h,d,l);t.texture.name="UnrealBloomPass.h"+e,t.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(t);const i=new r.WebGLRenderTarget(h,d,l);i.texture.name="UnrealBloomPass.v"+e,i.texture.generateMipmaps=!1,this.renderTargetsVertical.push(i),h=Math.round(h/2),d=Math.round(d/2)}void 0===o.LuminosityHighPassShader&&console.error("THREE.UnrealBloomPass relies on LuminosityHighPassShader");const c=o.LuminosityHighPassShader;this.highPassUniforms=r.UniformsUtils.clone(c.uniforms),this.highPassUniforms.luminosityThreshold.value=a,this.highPassUniforms.smoothWidth.value=.01,this.materialHighPassFilter=new r.ShaderMaterial({uniforms:this.highPassUniforms,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader,defines:{}}),this.separableBlurMaterials=[];const u=[3,5,7,9,11];h=Math.round(this.resolution.x/2),d=Math.round(this.resolution.y/2);for(let e=0;e<this.nMips;e++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(u[e])),this.separableBlurMaterials[e].uniforms.texSize.value=new r.Vector2(h,d),h=Math.round(h/2),d=Math.round(d/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.uniforms.bloomStrength.value=t,this.compositeMaterial.uniforms.bloomRadius.value=.1,this.compositeMaterial.needsUpdate=!0;this.compositeMaterial.uniforms.bloomFactors.value=[1,.8,.6,.4,.2],this.bloomTintColors=[new r.Vector3(1,1,1),new r.Vector3(1,1,1),new r.Vector3(1,1,1),new r.Vector3(1,1,1),new r.Vector3(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,void 0===n.CopyShader&&console.error("THREE.UnrealBloomPass relies on CopyShader");const p=n.CopyShader;this.copyUniforms=r.UniformsUtils.clone(p.uniforms),this.copyUniforms.opacity.value=1,this.materialCopy=new r.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:p.vertexShader,fragmentShader:p.fragmentShader,blending:r.AdditiveBlending,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this._oldClearColor=new r.Color,this.oldClearAlpha=1,this.basic=new r.MeshBasicMaterial,this.fsQuad=new s.FullScreenQuad(null)}dispose(){for(let e=0;e<this.renderTargetsHorizontal.length;e++)this.renderTargetsHorizontal[e].dispose();for(let e=0;e<this.renderTargetsVertical.length;e++)this.renderTargetsVertical[e].dispose();this.renderTargetBright.dispose()}setSize(e,t){let i=Math.round(e/2),s=Math.round(t/2);this.renderTargetBright.setSize(i,s);for(let e=0;e<this.nMips;e++)this.renderTargetsHorizontal[e].setSize(i,s),this.renderTargetsVertical[e].setSize(i,s),this.separableBlurMaterials[e].uniforms.texSize.value=new r.Vector2(i,s),i=Math.round(i/2),s=Math.round(s/2)}render(e,t,i,r,s){e.getClearColor(this._oldClearColor),this.oldClearAlpha=e.getClearAlpha();const n=e.autoClear;e.autoClear=!1,e.setClearColor(this.clearColor,0),s&&e.state.buffers.stencil.setTest(!1),this.renderToScreen&&(this.fsQuad.material=this.basic,this.basic.map=i.texture,e.setRenderTarget(null),e.clear(),this.fsQuad.render(e)),this.highPassUniforms.tDiffuse.value=i.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.fsQuad.material=this.materialHighPassFilter,e.setRenderTarget(this.renderTargetBright),e.clear(),this.fsQuad.render(e);let o=this.renderTargetBright;for(let t=0;t<this.nMips;t++)this.fsQuad.material=this.separableBlurMaterials[t],this.separableBlurMaterials[t].uniforms.colorTexture.value=o.texture,this.separableBlurMaterials[t].uniforms.direction.value=a.BlurDirectionX,e.setRenderTarget(this.renderTargetsHorizontal[t]),e.clear(),this.fsQuad.render(e),this.separableBlurMaterials[t].uniforms.colorTexture.value=this.renderTargetsHorizontal[t].texture,this.separableBlurMaterials[t].uniforms.direction.value=a.BlurDirectionY,e.setRenderTarget(this.renderTargetsVertical[t]),e.clear(),this.fsQuad.render(e),o=this.renderTargetsVertical[t];this.fsQuad.material=this.compositeMaterial,this.compositeMaterial.uniforms.bloomStrength.value=this.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,e.setRenderTarget(this.renderTargetsHorizontal[0]),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture,s&&e.state.buffers.stencil.setTest(!0),this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(i),this.fsQuad.render(e)),e.setClearColor(this._oldClearColor,this.oldClearAlpha),e.autoClear=n}getSeperableBlurMaterial(e){return new r.ShaderMaterial({defines:{KERNEL_RADIUS:e,SIGMA:e},uniforms:{colorTexture:{value:null},texSize:{value:new r.Vector2(.5,.5)},direction:{value:new r.Vector2(.5,.5)}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}"})}getCompositeMaterial(e){return new r.ShaderMaterial({defines:{NUM_MIPS:e},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},dirtTexture:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform sampler2D dirtTexture;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}"})}}a.BlurDirectionX=new r.Vector2(1,0),a.BlurDirectionY=new r.Vector2(0,1)},"./src/js/app/jsm/shaders/AfterimageShader.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{AfterimageShader:()=>r});const r={uniforms:{damp:{value:.96},tOld:{value:null},tNew:{value:null}},vertexShader:"\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tuniform float damp;\n\n\t\tuniform sampler2D tOld;\n\t\tuniform sampler2D tNew;\n\n\t\tvarying vec2 vUv;\n\n\t\tvec4 when_gt( vec4 x, float y ) {\n\n\t\t\treturn max( sign( x - y ), 0.0 );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 texelOld = texture2D( tOld, vUv );\n\t\t\tvec4 texelNew = texture2D( tNew, vUv );\n\n\t\t\ttexelOld *= damp * when_gt( texelOld, 0.1 );\n\n\t\t\tgl_FragColor = max(texelNew, texelOld);\n\n\t\t}"}},"./src/js/app/jsm/shaders/CopyShader.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{CopyShader:()=>r});const r={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:"\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}"}},"./src/js/app/jsm/shaders/LuminosityHighPassShader.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{LuminosityHighPassShader:()=>r});const r={shaderID:"luminosityHighPass",uniforms:{tDiffuse:{value:null},luminosityThreshold:{value:1},smoothWidth:{value:1},defaultColor:{value:new(i("./node_modules/three/build/three.module.js").Color)(0)},defaultOpacity:{value:0}},vertexShader:"\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 defaultColor;\n\t\tuniform float defaultOpacity;\n\t\tuniform float luminosityThreshold;\n\t\tuniform float smoothWidth;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n\t\t\tfloat v = dot( texel.xyz, luma );\n\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\n\t\t}"}},"./src/js/app/main.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>a});var r=i("./node_modules/three/build/three.module.js"),s=i("./src/js/app/global.js"),n=(i("./node_modules/howler/dist/howler.js"),i("./src/js/app/dataManager.js"));i("./src/js/utils/vUtils_loader.js");function o(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.scene.background=new r.Color(268435455),this.scene.background=new r.Color(0),this.mouseClicked=!1,this.pmouseX=0,this.pmouseY=0,this.parentTransform=new r.Object3D,this.scene.add(this.parentTransform),this.thetaX=0,this.thetaY=100,this.thetaXspeed=2e-4*Math.random(),Math.random()>.5?this.thetaXspeed=this.thetaXspeed+1e-4:this.thetaXspeed=-this.thetaXspeed-1e-4,this.thetaYspeed=2e-4*Math.random(),Math.random()>.5?this.thetaYspeed=this.thetaYspeed+1e-4:this.thetaYspeed=-this.thetaYspeed-1e-4,this.radius=100;var i=new n.default;s.default.dataManager=i;new r.MeshBasicMaterial({color:16777215,side:r.DoubleSide});this.array_points=new Float32Array(1048576),this.dataTex_points=null,i.loadAllData().then((function(){}))}var t,i,a;return t=e,(i=[{key:"render",value:function(e,t){t.setRenderTarget(null),t.clear(),t.render(this.scene,e)}},{key:"onMouseMove",value:function(e,t){}},{key:"onMouseClick",value:function(e,t){this.pmouseX=e,this.pmouseY=t,this.mouseClicked=!0}},{key:"onMouseRelease",value:function(e,t){this.mouseClicked=!1}},{key:"onWindowResize",value:function(e,t){}}])&&o(t.prototype,i),a&&o(t,a),e}()},"./src/js/app/main_three.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>m});var r=i("./node_modules/three/build/three.module.js"),s=i("./src/js/data/config.js"),n=i("./src/js/app/global.js"),o=i("./src/js/app/main.js"),a=i("./src/js/app/jsm/libs/stats.module.js"),l=(i("./src/js/app/jsm/libs/lil-gui.module.min.js"),i("./src/js/app/jsm/controls/OrbitControls.js")),h=i("./src/js/app/jsm/postprocessing/EffectComposer.js"),d=i("./src/js/app/jsm/postprocessing/RenderPass.js"),c=i("./src/js/app/jsm/postprocessing/UnrealBloomPass.js"),u=(i("./src/js/app/jsm/postprocessing/AfterimagePass.js"),i("./src/js/app/model/texture.js"));function p(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(t){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.stats=new a.default,this.container.appendChild(this.stats.dom),this.clock=new r.Clock,n.default.clock=this.clock,n.default.windowWidth=window.innerWidth,n.default.windowHeight=window.innerHeight,window.devicePixelRatio&&(s.default.dpr=window.devicePixelRatio),this.renderer=new r.WebGLRenderer({}),console.log("webgl2",this.renderer.capabilities.isWebGL2),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.toneMapping=r.ReinhardToneMapping,this.container.appendChild(this.renderer.domElement);var p=new r.Scene;this.camera=new r.PerspectiveCamera(70,window.innerWidth/window.innerHeight,1,1e4),this.camera.position.set(0,0,100),p.add(this.camera),n.default.camera=this.camera,this.controls=new l.OrbitControls(this.camera,this.renderer.domElement),this.controls.enableDamping=!0,this.controls.dampingFactor=.06,this.controls.minDistance=1,this.controls.maxDistance=100,this.controls.enablePan=!1,this.controls.autoRotateSpeed=.2,n.default.orbitControl=this.controls,p.add(new r.AmbientLight(6316128));var m=new r.PointLight(16777215,1);this.camera.add(m);var g=new d.RenderPass(p,this.camera),f=1,v=.8,b=0,w=.3;this.bloomPass=new c.UnrealBloomPass(new r.Vector2(window.innerWidth,window.innerHeight),1,.25,.85),this.renderer.toneMappingExposure=Math.pow(f,4),this.bloomPass.threshold=b,this.bloomPass.strength=v,this.bloomPass.radius=w,this.composer=new h.EffectComposer(this.renderer),this.composer.addPass(g),this.composer.addPass(this.bloomPass),this.main,this.texture=new u.default,this.texture.load().then((function(){n.default.textures=i.texture.textures,n.default.textures.intestine.wrapS=r.RepeatWrapping,n.default.textures.intestine.wrapT=r.RepeatWrapping,i.main=new o.default(p),s.default.isLoaded=!0,i.container.querySelector("#loading").style.display="none",i.animate()}));var x=this;window.addEventListener("mousemove",(function(e){x.mouseMoved(e)})),window.addEventListener("mousedown",(function(e){x.mouseClicked(e)})),window.addEventListener("mouseup",(function(e){x.mouseReleased(e)})),window.addEventListener("resize",(function(e){x.windowResized(e)}))}var t,i,m;return t=e,(i=[{key:"animate",value:function(){s.default.isDev&&s.default.isShowingStats,this.main.render(this.camera,this.renderer),s.default.isDev&&s.default.isShowingStats,this.stats.update(),this.controls.update(),this.composer.render(),requestAnimationFrame(this.animate.bind(this))}},{key:"mouseMoved",value:function(e){var t=e.clientX-window.innerWidth/2,i=-(e.clientY-window.innerHeight/2);this.main&&this.main.onMouseMove(t,i),n.default.mouseX=t,n.default.mouseY=i}},{key:"mouseClicked",value:function(e){var t=e.clientX-window.innerWidth/2,i=-(e.clientY-window.innerHeight/2);this.main.onMouseClick(t,i)}},{key:"mouseReleased",value:function(e){var t=e.clientX-window.innerWidth/2,i=-(e.clientY-window.innerHeight/2);this.main.onMouseRelease(t,i)}},{key:"windowResized",value:function(){var e=window.innerWidth,t=window.innerHeight;n.default.windowWidth=e,n.default.windowHeight=t,this.camera.aspect=e/t,this.camera.updateProjectionMatrix(),this.renderer.setSize(e,t),this.composer.setSize(e,t),this.main.onWindowResize(e,t)}}])&&p(t.prototype,i),m&&p(t,m),e}()},"./src/js/app/model/texture.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>l});var r=i("./node_modules/three/build/three.module.js"),s=i("./node_modules/es6-promise/dist/es6-promise.js"),n=i("./src/js/utils/helpers.js"),o=i("./src/js/data/config.js");function a(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={}}var t,i,l;return t=e,(i=[{key:"load",value:function(){var e=this,t=new r.TextureLoader,i=o.default.maxAnisotropy,a=o.default.texture.imageFiles,l=[];return t.setPath(o.default.texture.path),a.forEach((function(e){l.push(new s.Promise((function(s,o){t.load(e.image,(function(t){t.anisotropy=i;var n={};n[e.name]=t,n[e.name]instanceof r.Texture&&s(n)}),n.default.logProgress(),(function(t){return o(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),s.Promise.all(l).then((function(t){for(var i=0;i<t.length;i++)e.textures[Object.keys(t[i])[0]]=t[i][Object.keys(t[i])[0]]}),(function(e){return console.log(e)}))}}])&&a(t.prototype,i),l&&a(t,l),e}()},"./src/js/data/config.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>r});const r={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:i("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,model:{selected:0,initialTypes:["gltf","object"],type:"gltf"},texture:{path:"./assets/textures/",imageFiles:[{name:"intestine",image:"intestine.png"},{name:"UV",image:"UV_Grid_Sm.jpg"},{name:"dash",image:"dash.png"}]},mesh:{enableHelper:!0,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:40,near:2,far:1e3,aspect:1,posX:0,posY:30,posZ:40},controls:{autoRotate:!0,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:600,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/detector.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>r});const r={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,i,r;t=void 0!==(e=e||{}).parent?e.parent:document.body,i=void 0!==e.id?e.id:"oldie",(r=this.getWebGLErrorMessage()).id=i,t.appendChild(r)}}},"./src/js/utils/helpers.js":(e,t,i)=>{"use strict";function r(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}i.r(t),i.d(t,{default:()=>s});var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,i,s;return t=e,s=[{key:"throttle",value:function(e,t,i){var r,s;return t||(t=250),function(){var n=i||this,o=+new Date,a=arguments;r&&o<r+t?(clearTimeout(s),s=setTimeout((function(){r=o,e.apply(n,a)}),t)):(r=o,e.apply(n,a))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,i){return function(r){e[t]=i[r],e.needsUpdate=!0}}}],(i=null)&&r(t.prototype,i),s&&r(t,s),e}()},"./src/js/utils/vUtils_loader.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{loadCsvAsync:()=>a,VShaderMaterial:()=>h});var r=i("./node_modules/three/build/three.module.js");function s(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,t,i,r,s,n,o){try{var a=e[n](o),l=a.value}catch(e){return void i(e)}a.done?t(l):Promise.resolve(l).then(r,s)}function o(e){return function(){var t=this,i=arguments;return new Promise((function(r,s){var o=e.apply(t,i);function a(e){n(o,r,s,a,l,"next",e)}function l(e){n(o,r,s,a,l,"throw",e)}a(void 0)}))}}function a(e){return l.apply(this,arguments)}function l(){return(l=o(regeneratorRuntime.mark((function e(t){var i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch(t);case 2:return i=e.sent,e.next=5,i.text();case 5:return e.abrupt("return",e.sent);case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var h=function(){function e(t,i,r,s,n,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.vertShader=null,this.fragShader=null,this.uniforms=i,this.useVertexColors=r,this.useVertexAlphas=s,this.useWireframe=n,this.onLoad=o,this.material=null,this.loadShader("vert",t+".vert"),this.loadShader("frag",t+".frag")}var t,i,n;return t=e,(i=[{key:"onLoadShader",value:function(){this.vertShader&&this.fragShader&&(this.material=new r.ShaderMaterial({uniforms:this.uniforms,vertexShader:this.vertShader,fragmentShader:this.fragShader,depthWrite:!0,side:r.DoubleSide,vertexColors:this.useVertexColors,wireframe:this.useWireframe,transparent:!0}),this.onLoad(this.material))}},{key:"loadShader",value:function(e,t){var i=new r.FileLoader,s=this;i.load(t,(function(t){"vert"===e?s.vertShader=t:"frag"===e&&(s.fragShader=t),s.onLoadShader()}),(function(e){console.log(e.loaded/e.total*100+"% loaded")}),(function(e){console.error("An error happened")}))}}])&&s(t.prototype,i),n&&s(t,n),e}()},"./src/css/app.scss":(e,t,i)=>{"use strict";i.r(t)}},e=>{"use strict";var t=t=>e(e.s=t);e.O(0,["vendors"],(()=>(t("./node_modules/@babel/polyfill/lib/index.js"),t("./src/js/app.js"))));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,